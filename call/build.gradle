if (isModule.toBoolean()) {
    apply plugin: 'com.android.library'
} else {

    apply plugin: 'com.android.application'
}


android {
    compileSdkVersion BUILD_VERSIONS.COMPILE_SDK
    buildToolsVersion BUILD_VERSIONS.BUILD_TOOLS
    defaultConfig {
        if (!isModule.toBoolean()) {
            applicationId "com.fenda.call"
        }
        minSdkVersion BUILD_VERSIONS.MIN_SDK
        targetSdkVersion BUILD_VERSIONS.TARGET_SDK
        versionCode BUILD_VERSIONS.VERSION_CODE
        versionName BUILD_VERSIONS.VERSION_NAME
        javaCompileOptions {

            annotationProcessorOptions {

                arguments = [moduleName: project.getName()]

            }
        }
    }
    signingConfigs {
        debug {
            storeFile file('../keystore/platform.jks')
            storePassword 'Fendakeji'
            keyAlias 'fenda'
            keyPassword 'Fendakeji'
        }
        release {
            keyAlias 'fenda'
            keyPassword 'Fendakeji'
            storeFile file('../keystore/platform.jks')
            storePassword 'Fendakeji'
        }
    }
    sourceSets {
        main {
            if (isModule.toBoolean()) {
                manifest.srcFile "src/main/module/AndroidManifest.xml"
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }

            } else {
                manifest.srcFile "src/main/AndroidManifest.xml"
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    api project(path: ':common')
    api project(path: ':CallLib')
    api project(path: ':CallKit')
    api project(path: ':IMLib')
    api project(path: ':IMKit')
    annotationProcessor deps.arouter_compiler
}
