if (isModule.toBoolean()){
    apply plugin: 'com.android.library'
    apply from : 'maven_config.gradle'
}else {
    apply plugin: 'com.android.application'
}



android {
    compileSdkVersion BUILD_VERSIONS.COMPILE_SDK
    buildToolsVersion BUILD_VERSIONS.BUILD_TOOLS


    defaultConfig {
        if (!isModule.toBoolean()){
            applicationId "com.fenda.ai"
        }

        minSdkVersion BUILD_VERSIONS.MIN_SDK
        targetSdkVersion BUILD_VERSIONS.TARGET_SDK
        versionCode BUILD_VERSIONS.VERSION_CODE
        versionName BUILD_VERSIONS.VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {

            annotationProcessorOptions {

                arguments = [AROUTER_MODULE_NAME: project.getName()]

            }
        }
        lintOptions {
            abortOnError false
        }

    }

    signingConfigs {
        debug {
            storeFile file('../keystore/platform.jks')
            storePassword 'Fendakeji'
            keyAlias 'fenda'
            keyPassword 'Fendakeji'
        }
        release {
            keyAlias 'fenda'
            keyPassword 'Fendakeji'
            storeFile file('../keystore/platform.jks')
            storePassword 'Fendakeji'
        }
    }




    sourceSets {
        main {
            if (isModule.toBoolean()) {

                manifest.srcFile "src/main/AndroidManifest.xml"
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            } else {
                manifest.srcFile "src/main/module/AndroidManifest.xml"
            }
        }
    }


    buildTypes {
        release {

            if (isModule.toBoolean()){
                // 集成模式 授权
                buildConfigField "boolean", "LAUNCHER", "true"
            }else {
                // 集成模式 授权
                buildConfigField "boolean", "LAUNCHER", "false"
            }
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            if (isModule.toBoolean()){
                // 集成模式 授权
                buildConfigField "boolean", "LAUNCHER", "true"
            }else {
                // 集成模式 授权
                buildConfigField "boolean", "LAUNCHER", "false"
            }
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            signingConfig signingConfigs.debug
        }
    }

//    //打包main目录下代码和资源的 task
//    task androidSourcesJar(type: Jar) {
//        classifier = 'sources'
//        from android.sourceSets.main.java.srcDirs
//    }
//
////配置需要上传到maven仓库的文件
//    artifacts {
//        archives androidSourcesJar
//    }
////上传到Maven仓库的task
//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                if (isLocalMaven.toBoolean()){
//                    //指定本地maven仓库
//                    repository(url: uri(maven.localMaven))
//                }else {
//                    //指定远程maven仓库url
//                    repository(url: maven.remoteMaven) {
//                        //nexus登录默认用户名和密码
//                        authentication(userName: maven.userName, password: maven.password)
//                    }
//                }
//
////                pom.groupId maven.fenda_groupId// 唯一标识（通常为模块包名，也可以任意）
////                pom.artifactId fenda.voice_artifactId// 项目名称（通常为类库模块名称，也可以任意）
////                if (isLocalMaven.toBoolean()){
////                    pom.version "1.0.11"// 版本号
////                }else {
////                    pom.version fenda.voice_version
////                }
////                pom.packaging maven.packaging//打包类型
//
//                pom.groupId = "com.fenda"// 唯一标识（通常为模块包名，也可以任意）
//                pom.artifactId = "voice" // 项目名称（通常为类库模块名称，也可以任意）
//                pom.version = "1.0.3" // 版本号
//                pom.packaging = "aar"//打包类型
//
//            }
//        }
//    }

}

repositories {
    flatDir {
        dirs 'libs'
        //this way we can find the .aar file in libs folder
    }
}






dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    //AI语音
    implementation 'com.sibichi:dds:1.11.1@aar'
//    api (name: 'lib-dds-1.1.11.1-release', ext: 'aar')
    implementation 'com.sibichi:iqiyi:1.0.1@aar'
    implementation 'com.sibichi:mediacatrl:1.0.1@aar'
    implementation 'com.sibichi:music:1.0.1@aar'
    implementation 'com.sibichi:remind:1.0.1@aar'
    implementation 'com.sibichi:setting:1.0.2@aar'
    implementation 'com.sibichi:tvctrl:1.0.1@aar'
//    if (isLocalMaven.toBoolean()){
//        implementation deps.fenda_common_local
//    }else {
//        implementation deps.fenda_common
//    }
    implementation project(path: ':common')

    annotationProcessor deps.arouter_compiler


}
