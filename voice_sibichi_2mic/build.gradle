if (isModule.toBoolean()){
    apply plugin: 'com.android.library'
}else {
    apply plugin: 'com.android.application'
}

apply plugin: 'maven'

android {
    compileSdkVersion BUILD_VERSIONS.COMPILE_SDK
    buildToolsVersion BUILD_VERSIONS.BUILD_TOOLS


    defaultConfig {
        if (!isModule.toBoolean()){
            applicationId "com.fenda.ai"
        }

        minSdkVersion BUILD_VERSIONS.MIN_SDK
        targetSdkVersion BUILD_VERSIONS.TARGET_SDK
        versionCode BUILD_VERSIONS.VERSION_CODE
        versionName BUILD_VERSIONS.VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {

            annotationProcessorOptions {

                arguments = [moduleName: project.getName()]

            }
        }
        lintOptions {
            abortOnError false
        }

    }

    signingConfigs {
        debug {
            storeFile file('../keystore/platform.jks')
            storePassword 'Fendakeji'
            keyAlias 'fenda'
            keyPassword 'Fendakeji'
        }
        release {
            keyAlias 'fenda'
            keyPassword 'Fendakeji'
            storeFile file('../keystore/platform.jks')
            storePassword 'Fendakeji'
        }
    }




    sourceSets {
        main {
            if (isModule.toBoolean()) {

                manifest.srcFile "src/main/AndroidManifest.xml"
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            } else {
                manifest.srcFile "src/main/module/AndroidManifest.xml"
            }
        }
    }


    buildTypes {
        release {

            if (isModule.toBoolean()){
                // 集成模式 授权
                buildConfigField "boolean", "LAUNCHER", "true"
            }else {
                // 集成模式 授权
                buildConfigField "boolean", "LAUNCHER", "false"
            }
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            if (isModule.toBoolean()){
                // 集成模式 授权
                buildConfigField "boolean", "LAUNCHER", "true"
            }else {
                // 集成模式 授权
                buildConfigField "boolean", "LAUNCHER", "false"
            }
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            signingConfig signingConfigs.debug
        }
    }


//打包main目录下代码和资源的 task
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    def  coreAarFile = file("libs/lib-dds-1.1.8.1-release.aar")
//配置需要上传到maven仓库的文件
    artifacts {
        archives androidSourcesJar
    }
//上传到Maven仓库的task
    uploadArchives {
        repositories {
            mavenDeployer {
                //指定maven仓库url
                repository(url: "http://192.168.100.127:8084/nexus/repository/maven-releases/") {
                    //nexus登录默认用户名和密码
                    authentication(userName: "admin", password: "fenda_nexus123")
                }
                pom.groupId = "com.fenda.ai"// 唯一标识（通常为模块包名，也可以任意）
                pom.artifactId = "VoiceSibiche2mic" // 项目名称（通常为类库模块名称，也可以任意）
                pom.version = "1.0.7" // 版本号
                pom.packaging = "aar"//打包类型

            }
        }
    }

}

repositories {
    flatDir {
        dirs 'libs'
        //this way we can find the .aar file in libs folder
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    //AI语音
//    implementation 'com.sibichi.dds:dds:1.1.8.1@aar'

//    implementation 'com.fenda.player:player:1.0.0@aar'
    implementation 'com.sibichi.lib_release_dds:dds:1.8.1@aar'
    implementation 'com.sibichi.skill:iqiyi:1.0.1@aar'
    implementation 'com.sibichi.skill_mediactrl:mediacatrl:1.0.1@aar'
    implementation 'com.sibichi.skill_music:music:1.0.1@aar'
    implementation 'com.sibichi.skill_remind:remind:1.0.1@aar'
    implementation 'com.sibichi.skill_setting:setting:1.0.1@aar'
    implementation 'com.sibichi.skill_tvctrl:tvctrl:1.0.1@aar'

//    api (name: 'lib-dds-1.1.8.1-release', ext: 'aar')
//    api (name: 'skill_music-release', ext: 'aar')
//    api (name: 'skill_iqiyi-release', ext: 'aar')
//    api (name: 'skill_mediactrl-release1', ext: 'aar')
//    api (name: 'skill_setting-release', ext: 'aar')
//    api (name: 'skill_tvctrl-release', ext: 'aar')
//    api (name: 'skill_remind-release_new', ext: 'aar')
    implementation project(path: ':common')
    annotationProcessor deps.arouter_compiler


}
